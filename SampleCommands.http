### Get the schema
GET http://localhost:8080/graphql

### Simple Query
GRAPHQL http://localhost:8080/graphql

{
    greeting(name: "George") {
        Greeting
    }
}

### Variable Example
GRAPHQL http://localhost:8080/graphql

query greeting($name: String!) {
    greeting(name: $name) {
        Greeting
    }
}

{
  "name": "George"
}

### Get Widgets
GRAPHQL http://localhost:8080/graphql

query GetWidgets {
    GetWidgets {
        id
        name
        price
        quantity
    }
}

### Get a specific widget
GRAPHQL http://localhost:8080/graphql

query GetWidget($id: ID!) {
    GetWidget(id: $id) {
        id
        name
        price
        quantity
    }
}

{
  "id": 1
}

### Add Widget
GRAPHQL http://localhost:8080/graphql

mutation AddWidget($widget: WidgetInput!) {
    CreateWidget(widget: $widget) {
        id
        name
        price
        quantity
    }
}

{
  "widget": {
    "name": "Widget 42",
    "price": 69.23,
    "quantity": 10
  }
}

### Update Widget
GRAPHQL http://localhost:8080/graphql

mutation UpdateWidget($widget: WidgetInput!) {
    UpdateWidget(widget: $widget) {
        id
        name
        price
        quantity
    }
}

{
  "widget": {
    "id": 1,
    "name": "Widget 42",
    "price": 69.23,
    "quantity": 105
  }
}

### Update Widget - Error case (note the id)
GRAPHQL http://localhost:8080/graphql

mutation UpdateWidget($widget: WidgetInput!) {
    UpdateWidget(widget: $widget) {
        id
        name
        price
        quantity
    }
}

{
  "widget": {
    "id": -1,
    "name": "Widget 42",
    "price": 2.50,
    "quantity": 5
  }
}

### Get Schema
GRAPHQL http://localhost:8080/graphql

query IntrospectionQuery {
    __schema {
        queryType {
            name
            fields {
                name
            }
            inputFields {
                name
            }
        }
        mutationType {
            name
            fields {
                name
            }
        }
        types {
            name
            kind
            fields {
                name
                type {
                    name
                    kind
                }
            }
        }
    }
}

### Get All Employees (Interface Example)
GRAPHQL http://localhost:8080/graphql

query GetAllEmployees {
    GetAllEmployees {
        ... on Developer {
            id
            name
            email
            salary
            hireDate
            programmingLanguages
            githubUsername
        }
        ... on Manager {
            id
            name
            email
            salary
            hireDate
            department
            teamSize
            reports {
                ... on Developer {
                    name
                    programmingLanguages
                }
            }
        }
    }
}

### Get All Employees with Type Discovery (New Approach)
# This demonstrates the new type discovery system - GetAllEmployees returns Employee interface
# but we can discover the actual type (Developer or Manager) at runtime
GRAPHQL http://localhost:8080/graphql

query GetAllEmployeesWithTypeDiscovery {
    GetAllEmployees {
        __typename
        ID
        Name
        Email
        Salary
        HireDate
        ... on Developer {
            ProgrammingLanguages
            GithubUsername
        }
        ... on Manager {
            Department
            TeamSize
        }
    }
}

### Get Specific Employee with Type Discovery
# GetEmployee now returns Employee interface, actual type discoverable at runtime
GRAPHQL http://localhost:8080/graphql

query GetEmployeeWithTypeDiscovery($id: Int!) {
    GetEmployee(id: $id) {
        __typename
        ID
        Name
        Email
        Salary
        HireDate
        # Developer-specific fields
        ... on Developer {
            ProgrammingLanguages
            GithubUsername
        }
        # Manager-specific fields
        ... on Manager {
            Department
            TeamSize
            Reports {
                __typename
                ID
                Name
                ... on Developer {
                    ProgrammingLanguages
                }
            }
        }
    }
}

{
  "id": 2
}

### Test Type Discovery with Different Employee IDs
# ID 1 is John Doe (Developer), ID 2 is Jane Smith (Manager), ID 3 is Bob Wilson (Developer)
GRAPHQL http://localhost:8080/graphql

query TestMultipleEmployees {
    developer: GetEmployee(id: 1) {
        __typename
        Name
        ... on Developer {
            ProgrammingLanguages
            GithubUsername
        }
    }
    manager: GetEmployee(id: 2) {
        __typename
        Name
        ... on Manager {
            Department
            TeamSize
        }
    }
    anotherDev: GetEmployee(id: 3) {
        __typename
        Name
        ... on Developer {
            ProgrammingLanguages
        }
    }
}

### Create Employee (Developer) - Using Union Return Type
GRAPHQL http://localhost:8080/graphql

mutation CreateDeveloper {
    CreateEmployee(input: {
        name: "Alice Developer"
        email: "alice@example.com"
        salary: 95000
        type: DEVELOPER
        programmingLanguages: ["Go", "TypeScript", "Python"]
        githubUsername: "alice-dev"
    }) {
        __typename
        ... on Developer {
            ID
            Name
            Email
            ProgrammingLanguages
            GithubUsername
        }
    }
}

### Create Employee (Manager) - Using Union Return Type
GRAPHQL http://localhost:8080/graphql

mutation CreateManager {
    CreateEmployee(input: {
        name: "Bob Manager"
        email: "bob@example.com"
        salary: 130000
        type: MANAGER
        department: "Product"
        programmingLanguages: []
    }) {
        __typename
        ... on Manager {
            ID
            Name
            Email
            Department
            TeamSize
        }
    }
}

### Promote Developer to Manager
GRAPHQL http://localhost:8080/graphql

mutation PromoteToManager($employeeId: Int!, $department: String!) {
    PromoteToManager(employeeId: $employeeId, department: $department) {
        id
        name
        email
        salary
        department
        teamSize
    }
}

{
  "employeeId": 3,
  "department": "DevOps"
}

### Search (Union Type Example)
GRAPHQL http://localhost:8080/graphql

query Search($query: String!) {
    Search(query: $query) {
        __typename
        ... on Widget {
            id
            name
            price
        }
        ... on Product {
            id
            name
            description
            price
        }
        ... on Developer {
            name
            email
            programmingLanguages
        }
        ... on Manager {
            name
            email
            department
        }
    }
}

{
  "query": "laptop"
}

### Get Products with Complex Nested Queries
GRAPHQL http://localhost:8080/graphql

query GetProducts {
    GetProducts(filter: {
        minPrice: 20
        maxPrice: 1000
        status: ACTIVE
        inStock: true
    }) {
        id
        name
        description
        price
        status
        inStock
        category {
            id
            name
            description
        }
        reviews {
            id
            rating
            comment
            createdAt
            user {
                username
                role
            }
        }
        averageRating
    }
}

### Get Categories with Products
GRAPHQL http://localhost:8080/graphql

query GetCategories {
    GetCategories {
        id
        name
        description
        products {
            id
            name
            price
            status
            inStock
        }
    }
}

### Create Product
GRAPHQL http://localhost:8080/graphql

mutation CreateProduct {
    CreateProduct(input: {
        name: "Gaming Mouse"
        description: "High-precision gaming mouse with RGB"
        price: 79.99
        categoryId: 1
    }) {
        id
        name
        description
        price
        status
        category {
            name
        }
    }
}

### Update Product Status (Enum Example)
GRAPHQL http://localhost:8080/graphql

mutation UpdateStatus($id: Int!, $status: ProductStatus!) {
    UpdateProductStatus(id: $id, status: $status) {
        id
        name
        status
        inStock
    }
}

{
  "id": 1,
  "status": "ACTIVE"
}

### Add Product Review
GRAPHQL http://localhost:8080/graphql

mutation AddReview($productId: Int!, $review: ReviewInput!) {
    AddProductReview(productId: $productId, review: $review) {
        id
        rating
        comment
        createdAt
        user {
            username
        }
    }
}

{
  "productId": 1,
  "review": {
    "rating": 5,
    "comment": "Amazing laptop, highly recommend!"
  }
}

### Get Current User (Context Example)
GRAPHQL http://localhost:8080/graphql
Authorization: Bearer admin-token

query GetCurrentUser {
    GetCurrentUser {
        id
        username
        email
        role
    }
}

### Get Current User (Not Authenticated)
GRAPHQL http://localhost:8080/graphql

query GetCurrentUser {
    GetCurrentUser {
        id
        username
        email
        role
    }
}

### Complex Query with Multiple Features
GRAPHQL http://localhost:8080/graphql

query ComplexQuery {
    GetWidgets {
        id
        name
        price
    }
    GetManagers {
        name
        department
        reports {
            ... on Developer {
                name
                programmingLanguages
            }
        }
    }
    GetProducts(filter: { status: ACTIVE }) {
        name
        price
        reviews {
            rating
        }
        averageRating
    }
    Search(query: "go") {
        __typename
        ... on Product {
            name
            price
        }
        ... on Developer {
            name
            programmingLanguages
        }
    }
}


### Complex Query with Multiple Features
GRAPHQL http://localhost:8080/graphql

{
    GetAllEmployees {
        ... on Developer {
            id
            name
            personalDetails {
                salary
                email
                phoneNumber
                address
            }
        }
        ... on Manager {
            id
            name
            personalDetails {
                salary
                email
                phoneNumber
                address
            }
        }
    }
}


### Complex Query with menthods on interfaces
GRAPHQL http://localhost:8080/graphql

{
    GetAllEmployees {
        ... on Developer {
            id
            name
            email
            salary
            hireDate
            personalDetails {
                salary
                email
                phoneNumber
                address
            }
        }
        ... on Manager {
            id
            name
            email
            salary
            hireDate
            department
            teamSize
            personalDetails {
                salary
                email
                phoneNumber
                address
            }
        }
    }
}

### ========================================
### SUBSCRIPTION EXAMPLES
### ========================================
### Note: These are subscription queries that need to be run over WebSocket
### You can test them using:
### 1. The subscription_client.html file (open in browser)
### 2. The subscription_client_example.go (go run subscription_client_example.go)
### 3. Any GraphQL client that supports subscriptions (e.g., GraphiQL, Playground)

### Subscribe to Current Time
# This subscription emits the current time at specified intervals
subscription CurrentTime {
currentTime(intervalMs: 1000) {
timestamp
formatted
}
}

### Subscribe to All Product Updates
# This subscription notifies about any product creation, update, or deletion
subscription ProductUpdates {
    productUpdates {
        product {
            id
            name
            price
            status
            category {
name
}
}
action
timestamp
}
}

### Subscribe to Product Updates by Category
# This subscription filters product updates by category
subscription ProductUpdatesByCategory($categoryId: Int\!) {
    productUpdatesByCategory(categoryId: $categoryId) {
        product {
            id
            name
            price
            status
        }
        action
timestamp
}
}

# Variables:
{
  "categoryId": 1
}

### Subscribe to Widget Updates
# Monitor all widget changes or filter by specific widget ID
subscription WidgetUpdates($widgetId: Int) {
    widgetUpdates(widgetId: $widgetId) {
        widget {
            id
            name
            price
            quantity
        }
        action
timestamp
}
}

# Variables (optional - omit to get all widget updates):
{
  "widgetId": 1
}

### Subscribe to Order Status Updates
# Track the status of a specific order as it progresses
subscription OrderStatus($orderId: String\!) {
orderStatusUpdates(orderId: $orderId) {
orderId
status
message
timestamp
}
}

# Variables:
{
  "orderId": "order-123"
}

### ========================================
### MUTATIONS TO TRIGGER SUBSCRIPTION EVENTS
### ========================================
### Use these mutations to trigger events that subscriptions will receive

### Create Product (triggers productUpdates)
GRAPHQL http://localhost:8080/graphql

mutation CreateProductForSubscription {
    CreateProduct(input: {
        name: "Subscription Test Product"
        description: "This product will trigger subscription events"
        price: 199.99
        categoryId: 1
    }) {
        id
        name
        status
    }
}

### Update Product Status (triggers productUpdates)
GRAPHQL http://localhost:8080/graphql

mutation UpdateProductForSubscription($id: Int\!) {
    UpdateProductStatus(id: $id, status: ACTIVE) {
        id
        name
        status
    }
}

{
  "id": 5
}

### Create Widget (triggers widgetUpdates)
GRAPHQL http://localhost:8080/graphql

mutation CreateWidgetForSubscription {
    CreateWidget(widget: {
        name: "Subscription Test Widget"
        price: 99.99
        quantity: 50
    }) {
        id
        name
        quantity
    }
}

### Update Widget (triggers widgetUpdates)
GRAPHQL http://localhost:8080/graphql

mutation UpdateWidgetForSubscription($id: Int\!) {
    UpdateWidget(widget: {
        id: $id
        name: "Updated Subscription Widget"
        price: 109.99
        quantity: 75
    }) {
        id
        name
        quantity
    }
}

{
  "id": 2
}


### Employee Interface Introspection
# Check how the Employee interface is represented in introspection
GRAPHQL http://localhost:8080/graphql

query EmployeeInterfaceIntrospection {
    employeeInterface: __type(name: "IEmployee") {
        kind
        name
        description
        possibleTypes {
            name
            kind
        }
        fields {
            name
            type {
                name
                kind
            }
        }
    }
    employeeType: __type(name: "Employee") {
        kind
        name
        interfaces {
            name
        }
    }
}

### EmployeeResult Union Introspection
# Check the union type used in CreateEmployee mutation
GRAPHQL http://localhost:8080/graphql

query EmployeeResultUnionIntrospection {
    __type(name: "EmployeeResult") {
        kind
        name
        description
        possibleTypes {
            name
            kind
        }
    }
}

### Developer and Manager Type Introspection
# Check what interfaces Developer and Manager implement
GRAPHQL http://localhost:8080/graphql

query ConcreteTypesIntrospection {
    developer: __type(name: "Developer") {
        kind
        name
        interfaces {
            name
        }
        fields {
            name
            type {
                name
                kind
                ofType {
                    name
                    kind
                }
            }
        }
    }
    manager: __type(name: "Manager") {
        kind
        name
        interfaces {
            name
        }
        fields {
            name
            type {
                name
                kind
                ofType {
                    name
                    kind
                }
            }
        }
    }
}

###############################################
### CUSTOM SCALAR EXAMPLES
###############################################

### Validate Email Address Scalar
GRAPHQL http://localhost:8080/graphql

query ValidateEmail {
    validateEmail(email: "user@example.com")
}

### Validate Invalid Email (will return false or error)
GRAPHQL http://localhost:8080/graphql

query ValidateInvalidEmail {
    validateEmail(email: "invalid-email")
}

### Create Colored Product with Custom Scalars (Money format: "amount currency")
GRAPHQL http://localhost:8080/graphql

mutation CreateColoredProduct {
    createColoredProduct(
        name: "Ruby Red Widget",
        price: "29.99 USD",
        color: "#FF0000"
    ) {
        id
        name
        price
        color
    }
}

### Create Colored Product with Variables (Money format)
GRAPHQL http://localhost:8080/graphql

mutation CreateColoredProductWithVars($name: String!, $price: Money!, $color: HexColor!) {
    createColoredProduct(
        name: $name,
        price: $price,
        color: $color
    ) {
        id
        name
        price
        color
    }
}

{
    "name": "Emerald Green Gadget",
    "price": "45.00 EUR",
    "color": "#00FF00"
}

### Get Employee by Custom ID Scalar
GRAPHQL http://localhost:8080/graphql

query GetEmployeeByScalarID {
    getEmployeeByIDScalar(id: "1") {
        ID
        Name
        Email
    }
}

### Get Server Start Time (DateTime Scalar)
GRAPHQL http://localhost:8080/graphql

query GetServerStartTime {
    getServerStartTime
}

### Multiple Scalar Examples in One Query
GRAPHQL http://localhost:8080/graphql

query MultipleScalarExamples {
    validateEmail(email: "test@domain.com")
    getServerStartTime
}

### Custom Scalar Schema Introspection
GRAPHQL http://localhost:8080/graphql

query CustomScalarIntrospection {
    emailAddress: __type(name: "EmailAddress") {
        name
        kind
        description
    }
    hexColor: __type(name: "HexColor") {
        name
        kind
        description
    }
    money: __type(name: "Money") {
        name
        kind
        description
    }
    dateTime: __type(name: "DateTime") {
        name
        kind
        description
    }
    employeeID: __type(name: "EmployeeID") {
        name
        kind
        description
    }
    productID: __type(name: "ProductID") {
        name
        kind
        description
    }
}

### Test Scalar Validation - Invalid Color (will fail)
GRAPHQL http://localhost:8080/graphql

mutation TestInvalidColor {
    createColoredProduct(
        name: "Invalid Color Product",
        price: 1000,
        color: "not-a-color"
    ) {
        id
    }
}

### Test Different Color Formats
GRAPHQL http://localhost:8080/graphql

mutation TestShortColorFormat {
    createColoredProduct(
        name: "Blue Widget",
        price: "15.00 GBP",
        color: "#00F"
    ) {
        id
        name
        price
        color
    }
}

### Complex Example with Multiple Custom Scalars
GRAPHQL http://localhost:8080/graphql

mutation ComplexScalarExample($productData: String!, $amount: Money!, $userEmail: EmailAddress!) {
    # Create a colored product
    product: createColoredProduct(
        name: $productData,
        price: $amount,
        color: "#FFD700"
    ) {
        id
        name
        price
        color
    }

    # Validate the email
    emailValid: validateEmail(email: $userEmail)

    # Get current server time
    timestamp: getServerStartTime
}

{
  "productData": "Golden Special Edition",
  "amount": "99.99 USD",
  "userEmail": "customer@shop.com"
}

### JSON Scalar Examples
GRAPHQL http://localhost:8080/graphql

query GetSampleJSON {
    getSampleJSONData
}

### JSON Scalar Processing
GRAPHQL http://localhost:8080/graphql

query ProcessJSONWithVars($metadata: JSON!) {
    processJSONMetadata(metadata: $metadata) {
        totalKeys
        typeBreakdown
        hasNestedObjects
        hasArrays
    }
}

{
  "metadata": {
    "product": "Smart Watch",
    "features": ["GPS", "Heart Rate", "Waterproof"],
    "specs": {
      "battery": "7 days",
      "weight": "45g",
      "display": "AMOLED"
    },
    "price": 299.99,
    "inStock": true
  }
}

### Create Product with JSON Metadata
GRAPHQL http://localhost:8080/graphql

mutation CreateProductWithJSON($name: String!, $price: Money!, $metadata: JSON!) {
    createProductWithMetadata(
        name: $name,
        price: $price,
        metadata: $metadata
    ) {
        id
        name
        price
        metadata
    }
}

{
  "name": "Advanced Smart Device",
  "price": "199.99 CAD",
  "metadata": {
    "category": "Electronics",
    "tags": ["smart", "wireless", "premium"],
    "technical": {
      "cpu": "ARM Cortex-M4",
      "memory": "256KB",
      "connectivity": ["WiFi", "Bluetooth 5.0"]
    },
    "warranty": "2 years",
    "energyRating": "A++",
    "certified": true
  }
}

type Query {
	GetAllEmployees: [Employee]!
	GetCategories: [Category!]!
	GetCurrentUser: User
	GetEmployee(id: Int!): Employee
	GetManagers: [Manager]!
	GetProduct(id: Int!): Product
	GetProducts(filter: ProductFilter): [Product!]!
	GetWidget(id: Int!): Widget!
	GetWidgets: [Widget!]!
	Search(query: String!): [SearchResult!]!
	getCurrentDateTime: DateTime!
	getEmployeeByIDScalar(id: EmployeeID!): Employee
	getSampleJSONData: JSON!
	getServerStartTime: DateTime!
	greeting(name: String!): GreetingResponse!
	processJSONMetadata(metadata: JSON!): JSON!
	validateEmail(email: EmailAddress!): Boolean!
}

type Mutation {
	AddProductReview(productId: Int!, review: ReviewInput!): Review
	CreateEmployee(input: EmployeeInput!): EmployeeResult!
	CreateProduct(input: ProductInput!): Product
	CreateWidget(widget: WidgetCreateInput!): Widget!
	PromoteToManager(employeeId: Int!, department: String!): Manager
	UpdateProductStatus(id: Int!, status: String!): Product
	UpdateWidget(widget: WidgetInput!): Widget!
	createColoredProduct(name: String!, price: Money!, color: HexColor!): ColoredProduct!
	createProductWithMetadata(name: String!, price: Money!, metadata: JSON!): ProductWithMetadata!
}

type Subscription {
	currentTime(intervalMs: Int!): TimeUpdate!
	orderStatusUpdates(orderId: String!): OrderUpdate!
	productUpdates: ProductUpdate!
	productUpdatesByCategory(categoryId: Int!): ProductUpdate!
	widgetUpdates(widgetId: Int): WidgetUpdate!
}

input EmployeeInput {
	department: String
	email: String!
	githubUsername: String
	name: String!
	programmingLanguages: [String!]!
	salary: Float!
	type: String!
}

input ProductFilter {
	categoryId: Int
	inStock: Boolean
	maxPrice: Float
	minPrice: Float
	status: String
}

input ProductInput {
	categoryId: Int!
	description: String!
	name: String!
	price: Float!
}

input ReviewInput {
	comment: String!
	rating: Int!
}

input WidgetInput {
	id: Int!
	name: String!
	price: Float!
	quantity: Int!
}

input WidgetCreateInput {
	name: String!
	price: Float!
	quantity: Int!
}

type Category {
	Description: String
	ID: Int!
	Name: String!
	Products: [Product!]!
}

type ColoredProduct {
	color: HexColor!
	id: ProductID!
	name: String!
	price: Money!
}

type Developer implements IEmployee {
	Email: String!
	GithubUsername: String
	HireDate: String!
	ID: Int!
	Name: String!
	PersonalDetails: PersonalInfo
	ProgrammingLanguages: [String!]!
	Salary: Float!
}

interface IEmployee {
	Email: String!
	HireDate: String!
	ID: Int!
	Name: String!
	PersonalDetails: PersonalInfo
	Salary: Float!
}

type Employee implements IEmployee {
	Email: String!
	HireDate: String!
	ID: Int!
	Name: String!
	PersonalDetails: PersonalInfo
	Salary: Float!
}

union EmployeeResult = Developer | Manager

type GreetingResponse {
	Greeting: String!
}

type Manager implements IEmployee {
	Department: String!
	Email: String!
	HireDate: String!
	ID: Int!
	Name: String!
	PersonalDetails: PersonalInfo
	Reports: [Employee]!
	Salary: Float!
	TeamSize: Int!
}

type OrderUpdate {
	message: String!
	orderId: String!
	status: String!
	timestamp: DateTime!
}

type PersonalInfo {
	address: String!
	email: String!
	phoneNumber: String!
	salary: Float!
}

type Product {
	AverageRating: Float
	Category: Category
	CategoryID: Int!
	Description: String!
	ID: Int!
	InStock: Boolean!
	Name: String!
	Price: Float!
	Reviews: [Review!]!
	Status: String!
}

type ProductUpdate {
	action: String!
	product: Product!
	timestamp: DateTime!
}

type ProductWithMetadata {
	id: ProductID!
	metadata: JSON!
	name: String!
	price: Money!
}

type Review {
	Comment: String!
	CreatedAt: String!
	ID: Int!
	ProductID: Int!
	Rating: Int!
	User: User
	UserID: Int!
}

union SearchResult = Developer | Employee | Manager | Product | Widget

type TimeUpdate {
	formatted: String!
	timestamp: Int!
}

type User {
	Email: String!
	ID: Int!
	Reviews: [Review!]!
	Role: String!
	Username: String!
}

type Widget {
	id: Int!
	name: String!
	price: Float!
	quantity: Int!
}

type WidgetUpdate {
	action: String!
	timestamp: DateTime!
	widget: Widget!
}

scalar DateTime # RFC3339 formatted date-time string
scalar EmailAddress # Valid email address
scalar EmployeeID # Unique identifier for employees
scalar HexColor # Hexadecimal color representation (e.g., #FF0000)
scalar JSON # Arbitrary JSON data
scalar Money # Monetary amount with currency (e.g., '123.45 USD')
scalar ProductID # Unique identifier for products
scalar URL # Valid URL

